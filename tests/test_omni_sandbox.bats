#!/usr/bin/env bats

load 'helpers/utils'

setup() {
  omni_setup 3>&-

  setup_omni_config 3>&-

  # Disable colors
  export NO_COLOR=1

  # Avoid wrapping
  export COLUMNS=1000
}

@test "[omni_sandbox=02] omni sandbox --path creates nested directory and placeholders" {
  setup_omni_config sandbox="~/sandboxes"

  nested_path="${HOME}/custom/sandboxes/deep/work"

  omni sandbox --path "$nested_path" --allow-empty 3>&-
  status=$?
  echo "STATUS: $status"
  [ "$status" -eq 0 ]

  [ -d "$nested_path" ]
  [ -f "$nested_path/.omni.yaml" ]
  [ -f "$nested_path/.omni/id" ]

  grep -q "# Generated by omni sandbox" "$nested_path/.omni.yaml"
  grep -q "up:" "$nested_path/.omni.yaml"
  grep -q "# - go" "$nested_path/.omni.yaml"
  grep -q "# - python" "$nested_path/.omni.yaml"

  echo "PWD: $(pwd)"
  [ "$(pwd)" = "$nested_path" ]

  cd "$HOME"
  check_commands
}

@test "[omni_sandbox=03] omni sandbox records dependencies with versions even on failure" {
  setup_omni_config

  sandbox_dir="${HOME}/sandbox/versioned"
  [ ! -d "$sandbox_dir" ]

  commands_dir="${HOME}/.commands"
  mkdir -p "$commands_dir"
  {
    printf '"registry" \n'
    printf '1\n'
    printf '\nstderr:registry failure\n'
  } >"${commands_dir}/mise_0"
  echo 1 >"${commands_dir}/mise_0_required"

  stdout_file="${BATS_TEST_TMPDIR}/sandbox_stdout"
  stderr_file="${BATS_TEST_TMPDIR}/sandbox_stderr"
  : >"$stdout_file"
  : >"$stderr_file"

  set +e
  omni sandbox --name versioned go@1.22.0 terraform@1.6.1 \
    1>"$stdout_file" 2>"$stderr_file" 3>&-
  status=$?
  set -e
  output="$(cat "$stdout_file" "$stderr_file")"
  echo "STATUS: $status"
  echo "OUTPUT: $output"
  [ "$status" -ne 0 ]
  [[ "$output" == *"sandbox command failed"* ]]
  [[ "$output" == *"omni up failed with status"* ]]

  [ -d "$sandbox_dir" ]
  [ -f "$sandbox_dir/.omni.yaml" ]
  grep -q "  - go@1.22.0" "$sandbox_dir/.omni.yaml"
  grep -q "  - terraform@1.6.1" "$sandbox_dir/.omni.yaml"

  echo "PWD: $(pwd)"
  [ "$(pwd)" = "$sandbox_dir" ]

  cd "$HOME"
  check_commands
}

@test "[omni_sandbox=04] omni sandbox --allow-empty creates sandbox without dependencies" {
  setup_omni_config

  sandbox_dir="${HOME}/sandbox/empty"
  [ ! -d "$sandbox_dir" ]

  omni sandbox --name empty --allow-empty 3>&-
  status=$?
  echo "STATUS: $status"
  [ "$status" -eq 0 ]

  [ -d "$sandbox_dir" ]
  [ -f "$sandbox_dir/.omni.yaml" ]
  [ -f "$sandbox_dir/.omni/id" ]

  # .omni.yaml should contain only the header and the up section with no entries
  grep -q "# Generated by omni sandbox" "$sandbox_dir/.omni.yaml"
  grep -q "^up:$" "$sandbox_dir/.omni.yaml"
  ! grep -q "  - " "$sandbox_dir/.omni.yaml"

  echo "PWD: $(pwd)"
  [ "$(pwd)" = "$sandbox_dir" ]

  cd "$HOME"
  check_commands
}


@test "[omni_sandbox=01] --name and --path are exclusive" {
  run omni sandbox --name clash --path . 3>&-
  echo "STATUS: $status"
  echo "OUTPUT: $output"
  [ "$status" -eq 1 ]
  [[ "$output" == *"cannot be used with '--path"* ]]
}
